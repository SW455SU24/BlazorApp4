@page "/ViewMeetings"
@rendermode InteractiveServer
@using BlazorApp4.Data
@using Microsoft.AspNetCore.Identity
@inject MeetingService MeetingService
@inject RoomService RoomService
@inject UserManager<ApplicationUser> UserManager

<h3>View Meetings</h3>

<div class="filters">
    <label>Filter by Room:</label>
    <select @bind="selectedRoom">
        <option value="">All Rooms</option>
        @foreach (var room in rooms)
        {
            <option value="@room.Id">@($"Room {room.Id} {(room.IsSpecial ? "(Special)" : "")}")</option>
        }
    </select>

    <label>Filter by Date:</label>
    <input type="date" @bind="selectedDate" />

    <label>Filter by User:</label>
    <select @bind="selectedUser">
        <option value="">All Users</option>
        @foreach (var user in users)
        {
            <option value="@user.Id">@user.FirstName @user.LastName</option>
        }
    </select>

    <button @onclick="ApplyFilters">Apply Filters</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Meeting Name</th>
            <th>Room</th>
            <th>Date & Time</th>
            <th>Attendees</th>
            <th>Creator</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredMeetings != null && filteredMeetings.Any())
        {
            @foreach (var meeting in filteredMeetings)
            {
                <tr @onclick="() => SelectMeeting(meeting)" class="@(selectedMeeting == meeting ? "table-active" : "")">
                    <td>@meeting.Name</td>
                    <td>
                        @if (meeting.Room != null)
                        {
                            @($"Room {meeting.Room.Id} {(meeting.Room.IsSpecial ? "(Special)" : "")}")
                        }
                        else
                        {
                            <span>Unknown Room</span>
                        }
                    </td>
                    <td>@meeting.timeDate.ToString("MMMM dd, yyyy hh:mm tt")</td>
                    <td>
                        @if (meeting.Attendees != null && meeting.Attendees.Any())
                        {
                            @foreach (var attendee in meeting.Attendees)
                            {
                                <span>@attendee.FirstName @attendee.LastName, </span>
                            }
                        }
                        else
                        {
                            <span>No attendees</span>
                        }
                    </td>
                    <td>
                        @if (meeting.Creator != null)
                        {
                            @($"{meeting.Creator.FirstName} {meeting.Creator.LastName}")
                        }
                        else
                        {
                            <span>Unknown Creator</span>
                        }
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5">No meetings scheduled.</td>
            </tr>
        }
    </tbody>
</table>

@if (selectedMeeting != null)
{
    <form method="post" @onsubmit="InviteSearch" @formname="starship-plain-form">
        <AntiforgeryToken />
        <div>
            <label>
                Identifier:
                <InputText @bind-Value="attendeeName" />
            </label>
        </div>
        <div>
            <button type="submit">Search</button>
        </div>
    </form>
}

<ul>
    @if(searchAttempted && invitedUser != null)
    {
        <h3>Search Results</h3>
        <li>@invitedUser.UserName</li>
        <button type="submit" @onclick="InviteSubmit">Invite</button>
    }
    else if(searchAttempted && invitedUser == null)
    {
        <li>User not found</li>
    }
</ul>


@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private List<Meeting> meetings = new List<Meeting>();
    private List<Meeting> filteredMeetings = new List<Meeting>();
    private List<Room> rooms = new List<Room>();
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private string? errorMessage;

    private string selectedRoom = "";
    private DateTime? selectedDate;
    private string selectedUser = "";
    private Meeting? selectedMeeting;
    private string? attendeeName;
    private bool searchAttempted = false;
    private bool searchSuccess = false;
    private ApplicationUser? invitedUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load all meetings, rooms, and users
            meetings = await MeetingService.GetMeetingsAsync();
            rooms = await RoomService.GetRoomsAsync();
            users = UserManager.Users.ToList();


            // Initially, display all meetings
            filteredMeetings = meetings;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private void SelectMeeting(Meeting meeting)
    {
        selectedMeeting = meeting;
    }

    private void InviteSearch()
    {
        searchAttempted = true;
        invitedUser = users.FirstOrDefault(u => u.UserName == attendeeName);
        if (invitedUser == null)
        {
            errorMessage = "User not found.";
            return;
        }
        else
        {
            searchSuccess = true;
        }
    }



    private void ApplyFilters()
    {
        int selectedRoomId;
        bool isRoomSelected = int.TryParse(selectedRoom, out selectedRoomId);

        filteredMeetings = meetings.Where(m =>
            (!isRoomSelected || m.Room?.Id == selectedRoomId) &&
            (!selectedDate.HasValue || m.timeDate.Date == selectedDate.Value.Date) &&
            (string.IsNullOrEmpty(selectedUser) || m.Creator?.Id == selectedUser)
        ).ToList();
    }
    private void InviteSubmit()
    {
        selectedMeeting.Attendees.Add(invitedUser);
        MeetingService.UpdateMeetingAsync(selectedMeeting);
    }
}